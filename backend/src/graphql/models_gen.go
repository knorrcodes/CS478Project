// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
)

type AddPaymentInput struct {
	Order  int `json:"order"`
	Amount int `json:"amount"`
}

type NewOrderInput struct {
	Table int `json:"table"`
}

type NewProductInput struct {
	Name       string  `json:"name"`
	Desc       *string `json:"desc"`
	Picture    *string `json:"picture"`
	Price      int     `json:"price"`
	Category   int     `json:"category"`
	Wscost     int     `json:"wscost"`
	NumOfSides *int    `json:"num_of_sides"`
}

type OrderStatus string

const (
	OrderStatusAny    OrderStatus = "ANY"
	OrderStatusOpened OrderStatus = "OPENED"
	OrderStatusClosed OrderStatus = "CLOSED"
)

var AllOrderStatus = []OrderStatus{
	OrderStatusAny,
	OrderStatusOpened,
	OrderStatusClosed,
}

func (e OrderStatus) IsValid() bool {
	switch e {
	case OrderStatusAny, OrderStatusOpened, OrderStatusClosed:
		return true
	}
	return false
}

func (e OrderStatus) String() string {
	return string(e)
}

func (e *OrderStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderStatus", str)
	}
	return nil
}

func (e OrderStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleManager  Role = "MANAGER"
	RoleServer   Role = "SERVER"
	RoleCustomer Role = "CUSTOMER"
)

var AllRole = []Role{
	RoleManager,
	RoleServer,
	RoleCustomer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleManager, RoleServer, RoleCustomer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
